-*- mode: org; comment-column: 0; -*-

# This file contains a list of commands that I've found handy in situations
# I've faced over time. These are commands that _I_ have used (successfully).
# I'm not claiming that this is the only way or even the right
# way to handle a particular situation that you may face. YMMV.

* Disable the touchpad
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       50d63d9d-82de-45ae-88ec-c5dd9fd94995
:END:
  - Checking to see if this interferes with typing due to the placement of the touchpad on the system76
#+begin_src fundamental
Run the following command in a terminal:

xinput list

You will get an output that looks like this:

⎡ Virtual core pointer                          id=2    [master pointer  (3)]
⎜   ↳ Virtual core XTEST pointer                id=4    [slave  pointer  (2)]
⎜   ↳ SynPS/2 Synaptics TouchPad                id=12   [slave  pointer  (2)]
⎣ Virtual core keyboard                         id=3    [master keyboard (2)]
    ↳ Virtual core XTEST keyboard               id=5    [slave  keyboard (3)]
    ↳ Power Button                              id=6    [slave  keyboard (3)]
    ↳ Video Bus                                 id=7    [slave  keyboard (3)]
    ↳ Power Button                              id=8    [slave  keyboard (3)]
    ↳ Sleep Button                              id=9    [slave  keyboard (3)]
    ↳ Laptop_Integrated_Webcam_1.3M             id=10   [slave  keyboard (3)]
    ↳ AT Translated Set 2 keyboard              id=11   [slave  keyboard (3)]
    ↳ Dell WMI hotkeys                          id=13   [slave  keyboard (3)]

It displays all the input devices connected. Note that they all have an id. Since 12 is the id for my touchpad, running the following command will disable it.

xinput disable 12

(and enable via a similar command)
#+end_src
* Opening any file in it's default application from the terminal
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       4761b97b-29f9-4437-b0ec-fdd81464b59f
:END:
  - Use =xdg-open=
* Recording the screen in Ubuntu
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       60886e26-47a3-4fe6-b091-a0e3530daaaf
:END:
  - Use the built-in screen recorder provided by Gnome.
  - Start/Stop the screen recorder using the hotkey <Ctrl + Alt + Shift + R>.
  - Whether the recording is on or not is indicated by a red dot in
    the notification center at the top-right of the screen.
  - By default, recording stops after 30 seconds. To change the
    default =max-screencast-length=, install =dconf-editor= and change
    the setting
    =/org/gnome/settings-daemon/plugins/media-keys/max-screencast-length=.
* Recording audio on Ubuntu
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       483e9c68-12d8-42e6-b4cb-260c3e6f7151
:END:
  - Use the built-in audio recorder =arecord= from the command-line.
* Taking a screenshot on Ubuntu
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       674e1e53-4722-4a52-a342-822428bb327e
:END:
  - Select the =Screenshot= application from Activities
* Dealing with 'boot space is filled up' warning
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       118fb692-c146-4a47-8f66-e7afe39d5852
:END:
** Get the list of kernels that you have installed but are no longer using:
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       36436dcc-817f-4db6-80b6-5da8bd25e6c3
:END:
#+begin_src shell
dpkg -l linux-{image,headers}-"[0-9]*" | awk '/^ii/{ print $2}' | grep -v -e `uname -r | cut -f1,2 -d"-"` | grep -e '[0-9]'
#+end_src
** Confirm that the output above does not contain the results of =uname -r=
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       103c1a54-344e-465e-8456-361f01ba45b4
:END:
** Remove the unused kernels by piping the output to =apt-get purge=
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       99d77b30-0753-4f82-8e59-15da4693dd78
:END:
#+begin_src shell
xargs sudo apt-get -y purge
#+end_src
** References:
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       7eb9fd2a-750e-4ddc-b719-7f835f51f5d8
:END:
+ https://askubuntu.com/a/90219: Also an excellent explanation of globbing on the shell
+ https://askubuntu.com/a/259092: The actual answer to this question
** Do this the next time you format your machine
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       54ad067c-2a20-4a04-b594-bf01f50a1f8b
:END:
- Make sure there is enough place in ~/boot/efi/~ drive. Currently,
  I'm using 2 GB and it's working like a charm so far.
* Steps when using apt to update your distribution
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       a46018eb-6702-4287-9b01-6ff388d11014
:END:
** Ensure that your packages are up-to-date
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       1a8a8943-a7e9-4531-a04c-060d89961f04
:END:
#+begin_src shell-script
  sudo apt update && sudo apt -y upgrade && sudo apt -y full-upgrade && sudo apt -y dist-upgrade
#+end_src
** Remove unused and unnecessary packages
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       a6fe5225-990d-4823-b176-c1a8ce02c024
:END:
#+begin_src shell-script
  sudo apt -y autoremove && sudo apt autoclean
#+end_src
** Run the upgrade command for PopOS
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       96cc74c8-522a-4ecd-999b-e0f074355209
:END:
#+begin_src shell-script
  sudo pop-upgrade release upgrade
#+end_src
* Searching for installed packages using apt
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       866a3cee-93be-4966-9f6e-5d3b1c5813e1
:END:
#+begin_src
apt list --installed | grep texlive
#+end_src
* Installing LaTeX packages
:PROPERTIES:
:ID:       459db3c9-5332-4ef4-87f9-40eab17f6b2d
:END:
#+begin_src
sudo apt install texlive-base texlive-latex-base texlive-plain-generic texlive texlive-binaries texlive-latex-recommended texlive-luatex texlive-latex-extra texlive-xetex texlive-fonts-recommended
#+end_src
- The whole shebang can be installed by installing =texlive-full=, but is unnecessary.

* Change Caps Lock behavior
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       7e028629-e5de-4bd3-b3c1-bcb4046d88d2
:END:
  - Install and use =gnome-tweak-tool=
  - In the keyboard section of =gnome-tweak-tool=, search for
    =Additional Layout Options=.

* My personal Operating System setup from scratch for Pop OS 20.10
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       f506800f-67ab-4231-ab8d-aab341dc4eb4
:END:
** Ubuntu: Install my favorite Nerd Fonts
https://www.nerdfonts.com/font-downloads
This is the first step because ~starship~ (installed later) requires a Nerd Font.

** Ubuntu: Install the basics for getting started with anything else
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       6d55077f-2489-491a-80ac-f397351b382b
:END:
- Common packages (Replace ~sudo apt~ with ~brew~ for Mac OS)
  #+begin_src sh :eval no
    sudo apt install tmux mercurial subversion aspell automake texinfo shellcheck tree wget curl git jq hugo
  #+end_src
- Linux specific packages
  #+begin_src sh :eval no
    sudo apt install gnome-tweaks aspell-en gawk default-jre-headless default-jre
  #+end_src

** Ubuntu: Install JVM 17 on linux
  #+begin_src sh :eval no
    # Oracle
    sudo apt-add-repository 'deb http://ppa.launchpad.net/linuxuprising/java/ubuntu focal main'
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A
    sudo apt-get update
    sudo apt install oracle-java17-installer --install-recommends

    # Azul
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0xB1998361219BD9C9
    sudo apt-add-repository 'deb http://repos.azulsystems.com/ubuntu stable main'
    sudo apt update
    sudo apt install zulu-17
  #+end_src
** Ubuntu: Set up file sharing to access private files
:PROPERTIES:
:ID:       71127cac-ef78-4b97-944a-fdeb83f2e9fa
:END:
- Setup my file-sharing systems to get access to my common files
- Symlink my ssh keys and gpg keys from my file-sharing systems to the home dir
- Make sure that [[id:39F38876-3B5D-4547-B608-A0384EFE540B][permissions are correctly set on the keys]]

** Ubuntu: Clone my public dotfiles into my source folder
- Symlink ~.gitconfig~ and ~.gitattributes~ from my public ~dotfiles~ to the home dir.

** Ubuntu: Install starship prompt
:PROPERTIES:
:CREATED:  [2021-12-12 Sun 08:19]
:ID:       028de332-1b76-4d10-909f-4ff3eb771c31
:END:
- Install the ~starship~ prompt from https://starship.rs/
- Symlink ~starship.toml~ to ~/.config/~
** Ubuntu: Install zsh and oh-my-zsh
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       b303ec83-8c3b-4391-b550-5105e2cf6f4f
:END:
- Refer to instructions here:
  + https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH
  + https://github.com/ohmyzsh/ohmyzsh/wiki
- Symlink ~.zhsrc~, ~.zshenv~ to home dir.
- Symlink ~personal.zsh~ in ~/.oh-my-zsh/custom/~ dir.
** Ubuntu: Install Rust and Rust based CLI tools
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       14c19bb7-db3a-47cd-9c67-d606d88aeff0
:END:
- Install Rust using Rustup as described at https://www.rust-lang.org/learn/get-started
- Install all the tools I use
  #+begin_src sh :eval no
    cargo install git-delta ripgrep du-dust exa zoxide fd-find procs bat tokei sd hyperfine tealdeer choose broot
  #+end_src
- Install ~rust-analyzer~ for Rust LSP
  #+begin_src sh :eval no
    git clone https://github.com/rust-analyzer/rust-analyzer.git && cd rust-analyzer
    cargo xtask install --server
  #+end_src

** Ubuntu: Install Go and Go based CLI tools
- Install Golang from https://go.dev/doc/install
- Install ~gopls~ (LSP) by following instructions in Go Wiki: https://pkg.go.dev/golang.org/x/tools/gopls#section-readme
- Install ~gron~ (grepping through JSON)
*** Install fzf
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       8f249335-bdfd-4379-86b5-4dc5e23f53d6
:END:
Refer to the *Using Git* section here: https://github.com/junegunn/fzf#installation

** Ubuntu: Install LaTex and Texinfo packages
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       1f194add-a1dd-4479-ba2e-a47050fe99bf
:END:
- Refer to [[id:459db3c9-5332-4ef4-87f9-40eab17f6b2d][Installing LaTeX packages]]
** Ubuntu: Install Imagemagick from source
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       fd8efb4e-50aa-4f82-9218-eb3123165c5b
:END:
I install it from source because I want the latest ImageMagick for
integration with Emacs.
#+begin_src sh :eval no
  git clone https://github.com/ImageMagick/ImageMagick.git ImageMagick
  cd ImageMagick
  ./configure --with-rsvg --with-perl --with-gslib
  make
  sudo make install
  sudo ldconfig /usr/local/lib
  # Verify the installation
  /usr/local/bin/convert logo: logo.gif
#+end_src
** Ubuntu: Install tmux-tpm from source
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       feeaeed3-f9f0-4859-b459-0bb78a770683
:END:
- Symlink ~.tmux.conf~ to home dir
- Clone the ~tmux-tpm~ repo
  #+begin_src sh :eval no
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  #+end_src
- Execute ~C-b I~ inside tmux once to install all the plugins
** Ubuntu: Install everything needed for Clojure development
:PROPERTIES:
:CREATED:  [2021-06-14 Mon 21:15]
:ID:       76a25f6e-d2db-455b-b3c4-9a8ee0e34fc2
:END:
*** Install leiningen from it's website
:PROPERTIES:
:CREATED:  [2021-06-05 Sat 14:00]
:ID:       27987b80-675f-4649-8c74-27d9145aded0
:END:
*** Install clj-kondo from it's website
:PROPERTIES:
:CREATED:  [2021-06-14 Mon 21:15]
:ID:       8f993f83-3a01-4cca-9df5-4816fd25b912
:END:
*** Install cljstyle from it's website
:PROPERTIES:
:CREATED:  [2021-06-14 Mon 21:15]
:ID:       f4aea7d7-a87b-45d9-beda-b6819bc670cf
:END:
*** Install Babashka from it's website
*** Symlink my lein folder from private-dotfiles to ~.lein~ in home
:PROPERTIES:
:CREATED:  [2021-06-14 Mon 21:16]
:ID:       3965cb21-c700-486a-9f70-79c01550d261
:END:
*** Install jdk sources
:PROPERTIES:
:CREATED:  [2021-06-14 Mon 22:26]
:ID:       8239e1c9-1c62-46b8-972e-4f3bd34442c4
:END:
- ~sudo apt install openjdk-11-jdk openjdk-11-source openjdk-11-demo visualvm~
** Ubuntu: Setup email via notmuch
:PROPERTIES:
:CREATED:  [2021-06-08 Tue 17:42]
:ID:       711b53be-49ea-404c-87fe-0e9844066004
:END:
- Install notmuch deps manually
  #+begin_src sh :eval no
    sudo apt-get install libxapian-dev libgmime-3.0-dev libtalloc-dev zlib1g-dev xapian-tools
  #+end_src
- Note that notmuch will be installed as part of Emacs and you don't
  have to do this manually.
- Install mbsync and msmtp
  #+begin_src sh :eval no
    sudo apt install isync msmtp
  #+end_src
- Symlink ~notmuch/.notmuch-config~, ~.mbsyncrc~ and ~.msmtprc~ from
  private dotfiles to Home.
- Symlink ~notmuch~ dir in private-dotfiles to ~<maildir>/.notmuch/hooks~
** Ubuntu: Install Emacs from source
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       71a1c516-4ec2-4773-a9a7-657aa2e6551d
:END:
- Refer to [[id:700381b6-78ef-4abb-9f68-6b514b5b83ba][Compiling and Running Emacs 28 on master branch (Ubuntu).]]
- Clone https://github.com/vedang/emacs-up to ~.emacs.d~
- Clone https://github.com/cask/cask to ~.cask~ in order to run cask based tests
- Symlink my  ~personal.el~ file and ~common.el~ file from private dotfiles into ~.emacs.d~
- ~sudo apt install libx32stdc++-10-dev~ to run pdf-tools
  ~have_packages_installed~ check correctly.
** Ubuntu: Install Ledger CLI from source
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       14db5d6f-434f-477f-9bef-9fee477a20dd
:END:
*** Install the prerequisites
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       2561c6d9-0be4-49fb-9007-d73416cb7eb9
:END:
#+begin_src sh :eval no
  sudo apt-get install build-essential cmake doxygen libboost-system-dev libboost-dev python3-dev gettext git libboost-date-time-dev libboost-filesystem-dev libboost-iostreams-dev libboost-python-dev libboost-regex-dev libboost-test-dev libedit-dev libgmp3-dev libmpfr-dev texinfo tzdata
#+end_src
*** Follow the instructions
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       359b0831-3408-4603-838d-32e7f9e97a9c
:END:
at: https://github.com/ledger/ledger

** Ubuntu: Install podman from the Kubic project
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       7b78bd17-99ce-4954-90fb-d0e817241ca1
:END:
- Follow instructions here to add the Kubic PPA: https://software.opensuse.org//download.html?project=devel%3Akubic%3Alibcontainers%3Astable&package=podman
- ~sudo apt install podman buildah skopeo~
- ~pip3 install podman-compose~

** Ubuntu: Install org-protocol prerequisites
:PROPERTIES:
:CREATED:  [2021-06-08 Tue 21:18]
:ID:       a10630bc-3bec-4e25-adb4-bdc3ebe6d147
:END:
- Follow the instructions in the README file of
  ~org-protocol-capture-html~

** Ubuntu: Install Timeshift for backups
:PROPERTIES:
:CREATED:  [2021-06-30 Wed 10:37]
:ID:       e4295bd7-3c3c-4957-b25b-d1158181a71b
:END:
- Set it up to take daily backups. After configuring, run timeshift from the command line.
  #+begin_src sh :eval no
    sudo apt install timeshift
    # Open timeshift GUI and configure
    sudo timeshift --check
  #+end_src
** Ubuntu: Install pip and pygments
:PROPERTIES:
:CREATED:  [2021-07-02 Fri 17:48]
:ID:       19dc725c-07f8-4b6c-b0d0-f01567c144d0
:END:
- For source code highlighting in org-exports
#+begin_src sh :eval no
  sudo apt install python3-pip
  pip install Pygments
#+end_src
- Add ~/.local/bin to the path (committed in zsh files)
** Ubuntu: Install pympress for PDF based presentations
:PROPERTIES:
:CREATED:  [2021-07-02 Fri 19:41]
:ID:       a24d350c-d049-458c-832d-a52fb7e29a97
:END:
#+begin_src sh :eval no
  # Doesn't need other packages because they have been previously installed
  sudo apt install pympress gobject-introspection

#+end_src

** Ubuntu: Install youtube-dl for downloading videos from Youtube
:PROPERTIES:
:CREATED:  [2021-07-06 Tue 19:44]
:ID:       8ba6188d-0307-4a72-af51-3fc8703c06e9
:END:
#+begin_src sh :eval no
sudo apt install youtube-dl
#+end_src

** Ubuntu: Install nvm, node and npm
:PROPERTIES:
:CREATED:  [2021-07-25 Sun 14:21]
:ID:       069f15a5-8c9d-4429-a790-8fa98f60db91
:END:
#+begin_src sh :eval no
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  nvm install node
  nvm install-latest-npm
#+end_src
** CANCELLED Ubuntu: Install Jenv                                :noexport:cancelled:
CLOSED: [2022-03-29 Tue 10:52]
:PROPERTIES:
:CREATED:  [2021-05-29 Sat 11:46]
:ID:       cbd2378f-3706-42df-a823-b56e94d898ba
:END:
:LOGBOOK:
- State "CANCELLED"  from              [2022-03-29 Tue 10:52] \\
  I don't use this method anymore. Check [[file:jvm-notes.txt]] for a simpler method of switching Java versions
:END:
  - Install jenv from : https://github.com/jenv/jenv
  - Follow the instructions above to install it. The instructions
    contain Mac specific information on how to install multiple
    versions of java.
  - For Ubuntu specific information, refer to
    https://aboullaite.me/switching-between-java-versions-on-ubuntu-linux/.
    (The important package is =update-java-alternatives=)
  - Ubuntu jvm paths to add to jenv look like this:
    =/usr/lib/jvm/java-13-openjdk-amd64/=
    #+begin_src shell
      jenv add /usr/lib/jvm/java-13-openjdk-amd64/
    #+end_src
  - List all installed versions with =jenv versions=

** Ubuntu: Install Power-management tools
:PROPERTIES:
:CREATED:  [2022-01-18 Tue 18:31]
:ID:       61a5b48c-bee1-48be-b4fc-e02dc3fed36c
:END:
- Install ~tlp~. Check their website to ensure instructions are correct: https://linrunner.de/tlp/installation/ubuntu.html
  #+begin_src sh :eval no
    sudo add-apt-repository ppa:linrunner/tlp
    sudo apt update
    sudo apt install tlp tlp-rdw ethtool
  #+end_src
- Install ~powertop~
  #+begin_src sh :eval no
    sudo apt install powertop
  #+end_src
- Review [[https://support.system76.com/articles/battery/][this article on battery]] by PopOS to better tune the power consumption.

** Ubuntu: Install tarsnap
:PROPERTIES:
:CREATED:  [2022-01-18 Tue 18:31]
:ID:       e8b8a15d-271c-45a1-935c-f60b8f8d8d2e
:END:
- Follow the instructions on https://www.tarsnap.com/download.html#source
- sudo tarsnap-keygen \
	--keyfile /root/tarsnap.key \
	--user me@email.com \
	--machine mybox
