-*- mode: org; -*-
* Change the Lock Screen Keyboard Shortcut
  - Launch System Preferences and go to the Keyboard pane.
  - Select the 'Keyboard Shortcuts' tab.
  - From the list on the left, select 'Application Shortcuts'.
  - Click on the plus (+) button below to add your new shortcut.
  - In the dialog box we'll want to leave 'All Applications' selected
    in the first menu. Enter 'Lock Screen' as the Menu Title. Please
    note this has to be exactly the same name you entered when saving
    the service in Automator. Finally, enter your keyboard shortcut.
    Let's go with Option+Shift+Q
  - Click Add and you're all done!
* Turn the wifi on/off from the terminal
  - You have to use =networksetup= for this
    #+begin_src shell-script
      # List all the hardware ports controlled by networksetup
      networksetup -listallhardwareports
      # Turn the wifi on
      networksetup -setairportpower en0 on # or off
    #+end_src
* Check if your machine is overheating
  #+begin_src sh :eval no
    pmset -g thermlog
  #+end_src
* Using secrets in shell scripts and config files
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:11]
:ID:       3fa0dfe5-53ba-47c7-a19d-ef3bdfbb9940
:BRAIN_PARENTS: FCE04B5D-71FB-4A3B-9ABC-FB9B6A531BE2
:END:
:RESOURCES:
- [[https://www.netmeister.org/blog/keychain-passwords.html][Using the OS X Keychain to store and retrieve passwords]]
:END:
If you have a local script or ~.bashrc~ or some other config script, avoid exporting/setting secret variables directly in these scripts. Instead:

1. Open *Keychain Access.app*
2. Add a new keychain from *File > New keychain*
   - Using new keychain will allow you to use a different password than login for storing secrets.
   - You can also use the login keychain, if you don't want to enter password each time
3. Add a name for the keychain, once you will click on Save button, it will ask to enter the password for the new keychain.
   - Add a decently complex password.
4. Once added, select the newly created keychain from the left pane of the Keychain Access app.
5. To add a new password item, select *File > New Password Item*. Fill in the following details:
   - Keychain item name: This is the keyword to access your keychain item.
   - Account Name: This could be anything, usually used to group 1 or more password items
   - Password: This is the secret you want to store in the Keychain against this item.
6. Once added, you should test the secret access in terminal with following command:
   #+begin_src sh :eval no
     security find-generic-password -a TEST_account_name -s TEST_item_name -w
   #+end_src

To load secrets, you can now create a function in your script as follows:
#+begin_src sh :eval no
  function load_secrets () {
    export SECRET1=$(security find-generic-password -a TEST_account1 -s TEST_item1 -w)
    export SECRET2=$(security find-generic-password -a TEST_account1 -s TEST_item2 -w)
  }
#+end_src

* My personal Operating System setup from scratch for macOS Monterey
** Install my favorite Nerd Fonts
https://www.nerdfonts.com/font-downloads
This is the first step because ~starship~ requires a Nerd Font
** Install the basics for getting started with anything else
- Install brew from https://brew.sh
- Install common packages from brew, as mentioned in [[id:6d55077f-2489-491a-80ac-f397351b382b][Ubuntu:Install the basics for getting started with anything else]]
- Install casks and brew-specific packages
  #+begin_src sh :eval no
    brew install iterm2 firefox keepassxc ripcord mactex ledger podman skopeo pinentry-mac starship gnu-sed signal gnupg
  #+end_src

** Set up file sharing to access private files
Follow the instructions in [[id:71127cac-ef78-4b97-944a-fdeb83f2e9fa][Ubuntu:Set up file sharing to access private files]]
** Clone my public dotfiles into my source folder
** Install starship prompt
We have already installed it using brew in one of the steps above. Follow the instructions in [[id:028de332-1b76-4d10-909f-4ff3eb771c31][Ubuntu:Install starship prompt]] to install configuration for starship.
** Install zsh and  oh-my-zsh
Follow the instructions in [[id:b303ec83-8c3b-4391-b550-5105e2cf6f4f][Ubuntu:Install zsh and oh-my-zsh]]
** Install Rust and Rust based CLI tools
Follow the instructions in [[id:14c19bb7-db3a-47cd-9c67-d606d88aeff0][Ubuntu:Install Rust and Rust based CLI tools]]
** Install Go and Go based CLI Tools
- Install golang from brew
  #+begin_src sh :eval no
    brew install golang
  #+end_src
- Install ~gopls~ (LSP) by following instructions in Go Wiki: https://pkg.go.dev/golang.org/x/tools/gopls#section-readme
- Install Go tools from brew
  #+begin_src sh :eval no
    brew install gron
  #+end_src
*** Install fzf
Refer to the *Using Git* section here: https://github.com/junegunn/fzf#installation

** Install tmux-tpm from source
Follow the instructions at [[id:feeaeed3-f9f0-4859-b459-0bb78a770683][Ubuntu:Install tmux-tpm from source]]
** Install everything needed for Clojure development
#+begin_src sh :eval no
  brew install leiningen clojure borkdude/brew/clj-kondo borkdude/brew/babashka cljstyle
#+end_src
*** Symlink my lein folder from private-dotfiles to ~.lein~ in home

*** Install jdk sources
#+begin_src sh :eval no
  brew install java visualvm mvn
#+end_src
~java~ needs to be symlinked when installed from brew:
#+begin_src sh :eval no
  sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
#+end_src
Confirm installation by running ~java -version~
** Setup email via notmuch
:PROPERTIES:
:CREATED:  [2021-06-08 Tue 17:42]
:ID:       711b53be-49ea-404c-87fe-0e9844066004
:END:
- Install notmuch deps manually
  #+begin_src sh :eval no
    brew install xapian gmime talloc zlib notmuch msmtp isync
  #+end_src
- Symlink ~notmuch/.notmuch-config~, ~.mbsyncrc~ and ~.msmtprc~ from private dotfiles to Home.
- Symlink ~notmuch~ dir in private-dotfiles to ~<maildir>/.notmuch/hooks~
** Install Emacs from jimeh
  #+begin_src sh :eval no
    brew tap jimeh/emacs-builds
    brew install emacs-app-good
  #+end_src
- Clone https://github.com/vedang/emacs-up to ~.emacs.d~
- Clone https://github.com/cask/cask to ~.cask~ in order to run cask based tests
- Symlink my  ~personal.el~ file and ~common.el~ file from private dotfiles into ~.emacs.d~
** Install pip and pygments
:PROPERTIES:
:CREATED:  [2021-07-02 Fri 17:48]
:ID:       19dc725c-07f8-4b6c-b0d0-f01567c144d0
:END:
- For source code highlighting in org-exports
#+begin_src sh :eval no
  pip3 install Pygments
#+end_src
** Install pympress for PDF based presentations
:PROPERTIES:
:CREATED:  [2021-07-02 Fri 19:41]
:ID:       a24d350c-d049-458c-832d-a52fb7e29a97
:END:
#+begin_src sh :eval no
  # Doesn't need other packages because they have been previously installed
  brew install pympress
#+end_src

** Install youtube-dl for downloading videos from Youtube
:PROPERTIES:
:CREATED:  [2021-07-06 Tue 19:44]
:ID:       8ba6188d-0307-4a72-af51-3fc8703c06e9
:END:
#+begin_src sh :eval no
brew install youtube-dl
#+end_src

** Install nvm, node and npm
:PROPERTIES:
:CREATED:  [2021-07-25 Sun 14:21]
:ID:       069f15a5-8c9d-4429-a790-8fa98f60db91
:END:
- Note that NVM version might have upgraded, so check the website! There is no better way at the moment.
#+begin_src sh :eval no
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
  nvm install node
  nvm install-latest-npm
#+end_src

** Install Jenv
  - Install jenv from : https://github.com/jenv/jenv
  - Follow the instructions above to install it. The instructions
    contain Mac specific information on how to install multiple
    versions of java.
  - List all installed versions with =jenv versions=

** Install AWS CLI
- ~brew install awscli~
- ~awscli configure~
- ~aws ecr get-login-password --region us-east-1 | podman login --username AWS --password-stdin <ecr-bucket>~

** Install tarsnap
- ~brew install openssl~
- Follow instructions on the tarsnap site for compilation
