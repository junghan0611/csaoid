:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       d82ea2b4-2339-4ca0-b391-85cc362b9904
:END:
-*- mode: org; comment-column: 0; -*-
#+title: Notes on using Git

This file contains a list of git commands that I've found handy in situations I've faced over time. These are commands that _I_ have used (successfully). I'm not claiming that this is the only way or even the right way to handle a particular situation that you may face. YMMV.

Along with commands, there are also some general git patterns that I have noted down. I hope this file is of help to you, or at least teaches you something about git that you didn't know beforehand

The commands are ordered by type rather than difficulty, so you are going to find intermediate and slightly advanced commands intermingled with the easy ones. I mean for this document to be used as a cheat-sheet, not a tutorial, but if you are confused about something shoot me a mail

* Basics: Adding a remote to git repo
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       c5ed1e5a-ab5f-4738-8b6f-f13744023f3a
:END:

** Initialize a git repository
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       f9fa51ca-3dea-4f07-9fe3-da0254586bbf
:END:
   #+begin_src shell-script :eval no
     git init
   #+end_src
   My recommendation is to always create an empty commit after your
   initialize the repo.

*** Create an empty commit
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       175615b8-0ca7-47ed-931e-96e043c463f2
:END:
    #+begin_src shell-script :eval no
      git commit -m "Empty initial commit" --allow-empty
    #+end_src

    This trick is useful when initializing the git repository, since
    the initial commit has special properties which stop it from being
    used in rebase operations.

** Mark everything in the current dir for committing to git
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       2054d43d-3fad-4d56-baf2-47a5e16ee8ab
:END:
   #+begin_src shell-script :eval no
     git add .
   #+end_src

** Create a git commit
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       6b888a0d-0b2b-48b5-963b-f15bea1858e3
:END:
   #+begin_src shell-script :eval no
     git commit -m
   #+end_src

** Add a new remote (public url) to your git repository
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       56e83423-5fce-4cb9-9551-114748be81c1
:END:
   #+begin_src shell-script :eval no
     git remote add origin git@github.com:vedang/reponame.git
   #+end_src

* Branching
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       67eb95dc-3260-4534-b1fa-7a2954bb3eb6
:END:

** The default commit is HEAD.
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       716716b9-7f99-4e36-afd0-107c48d668b3
:END:
   #+begin_src shell-script :eval no
     git checkout -b <branchname> <commit>
   #+end_src

** Delete a branch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       5b7fbced-7b2a-4ce4-89d6-3636cbad830f
:END:
   #+begin_src shell-script :eval no
     git checkout -d <branchname>
   #+end_src

** Rename a branch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       94563a10-8e3d-447a-a548-9d48b150b948
:END:
   #+begin_src shell-script :eval no
     git checkout -m <branchname> <newbranchname>
   #+end_src

** Merge branch <branchname> with current branch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       d9f7f09f-3900-47d9-9769-40f19b18a8d9
:END:
   #+begin_src shell-script :eval no
     git merge <branchname>
   #+end_src

** Push a local branch to remote
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       158e0ba4-c0be-4b7f-82cc-e03dc6b3863b
:END:
   #+begin_src shell-script :eval no
     git push <remotename> <localbranchname>:<remotebranchname>
   #+end_src

** Delete branch on remote. Literally, push /nothing/ into <branchname>
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       791ba3a1-7fc5-4298-8bcc-fbbbad88ebcc
:END:
   #+begin_src shell-script :eval no
     git push <remotename> :<branchname>
   #+end_src

** Create an empty branch
:PROPERTIES:
:ID:       51fd0f0a-92f7-4750-a2dc-22be31f93ab2
:END:
   #+begin_src shell-script :eval no
     git symbolic-ref HEAD refs/heads/newbranch
     rm .git/index
     git clean -fdx
   #+end_src

   There is a much simpler way to do this in modern Git (above
   v1.7.2). This is as follows:
   #+begin_src shell-script :eval no
     git checkout --orphan newbranch
     git rm -rf .
   #+end_src

** Does my branch have the latest master?
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       33ebb53b-a9b1-43be-96b3-cbfdaa89a737
:END:
   #+begin_src shell-script :eval no
     git branch -r --merged origin/branchname | rg origin/master
   #+end_src

** Was my branch merged into master?
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       485b88ca-ff04-45db-826c-be553981fe5b
:END:
   #+begin_src shell-script :eval no
     git branch -r --merged origin/master | rg origin/branchname

** Create a separate repository from a range of commits restricted to a sub-directory
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       6baa94fc-2e01-4fe1-b6d0-6f43a5aa0183
:END:
   #+begin_src shell-script :eval no
     git filter-branch --subdirectory-filter trunk HEAD
     git remote add neworigin /path/to/trunk
     git push neworigin master
   #+end_src
   Basically, what this snippet is doing is the following:
   - Create a new repository from a sub-directory named trunk.
   - Automatically remove commits that did not affect the sub-directory

   This can also be done using git-subtree on git 1.7.11+
   Refer to [[id:171BE2FB-7835-4E96-A984-FC2B24E91019][Subtree (1.7.11+)]]

*** Getting back original master
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       4e37d227-ee46-4392-9ca6-218c75e0fb41
:END:
    #+begin_src shell-script :eval no
      git checkout masters_original_HEAD
      git checkout -b tmp
      git merge -s ours master
      git checkout master
      git merge tmp
      git reset --soft HEAD^
    #+end_src

    The final step removes the merge-commit and reverts the local repo
    back to state before the =filter-branch=.

** Change the upstream target for a branch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       1bd52a24-daf2-4983-9633-a200d33eb068
:END:
   #+begin_src shell-script :eval no
     git checkout <branch_name>
     git branch --set-upstream-to=origin/<branch_name>
   #+end_src

* Merging and Rebasing
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       5d3071fb-739d-4611-a7a7-c395ab65b738
:END:

# Merge the code from some other branch into our branch, keeping our code
# on every conflict
$ git merge -s recursive -Xours <branchname>

# Similarly, we can also use theirs with -s to keep the incoming copy of code
$ git merge -s recursive -Xtheirs <branchname>

# This strategy (above) is especially useful if the code on master has
# become a total mess and you just want to replace it with the code on a sane
# branch (say develop)
$ git checkout develop
$ git merge -s ours master
$ git checkout master
$ git merge develop

# You can also use this strategy to resolve merge-conflicts on a per-file basis
[~/testing (develop *+|MERGING u+7)]
$ git status
# On branch develop
# Your branch is ahead of 'origin/develop' by 7 commits.
#
# Changes to be committed:
#
#       modified:   INSTALL.txt
#       modified:   License.txt
#
# Unmerged paths:
#   (use "git add/rm <file>..." as appropriate to mark resolution)
#
#       both modified:      README.txt
#

# to keep the changes on our branch
$ git checkout --ours README.txt
$ git add README.txt
$ git commit

# merge project A into subdirectory A
# - From http://jasonkarns.com/blog/merge-two-git-repositories-into-one/
# Path should be a remote
# the -f option runs `git fetch <name>` immediately after the remote info
# is set up.
# This makes your history look like this directory was in the repo all along
# There is a good explanation of this on github here -
# https://help.github.com/articles/working-with-subtree-merge
$ git remote add -f projA /path/to/projA
$ git merge -s ours --no-commit projA/master
$ git read-tree --prefix=subdirA/ -u projA/master
$ git commit -m "merging projA into subdirA"

# This can also be done much easily using the new git subtree command. git-subtree
# in now included in git 1.7.11+ in the contrib section
# Refer to [[id:171BE2FB-7835-4E96-A984-FC2B24E91019][Subtree (1.7.11+)]]

# Sometimes, it's irritating that rebase destroys merge commits.
# I want the merge commit there to indicate the flow of the work
# Enter --preserve-merges or -p
$ git rebase -p <branchname>

# Find the common base between two branches. (useful to know what will
# merge / has diverged)
$ git merge-base <branch1> <branch2>

# Reverting a merge commit is almost (but not quite) like reverting a
# normal commit. In the normal case, if you want to revert commit M,
# you just say =git revert M=, but if M is a merge-commit, you have to
# specify _which side (parent) of the merge_ you want to revert.
# Eg: Do you want to revert the changes (A B), or (C D)?
   # ---C---D---M---x---x
   #           /
   #   ---A---B

# The git log will show you this information for a merge commit:

   # commit 87e6940c98b9b297320ad31919210a901ced9ff0
   # Merge: 80f9a47 b866156
   # Author: Vedang Manerikar <ved.manerikar@gmail.com>
   # Date:   Thu Aug 7 13:56:08 2014 +0530
   #
   #     Merge branch 'feature/X' into master

# Here D = 80f9a47 and B = b866156
# So if you want to revert (A B), you have to tell git to revert the
# 2nd parent, and keep the 1st.

$ git revert M -m 2

# The tree will now look like :
   # ---C---D---M---x---x---W
   #           /
   #   ---A---B
# where W reverts the changes introduced in M.

# NOTE: This causes problems if you ever want to merge (A B) back into
# this branch! You have to remember to "revert the revert commit".
# For more information on why git behaves this way, read:
# https://www.kernel.org/pub/software/scm/git/docs/howto/revert-a-faulty-merge.txt
* Tagging
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       3e535c95-bee1-4b00-943f-314ae190e734
:END:

# Create a tag signed using gpg
$ git tag -u <key-id> <tagname> <commitid>

# Push single tag to remote
$ git push <remotename> <tagname>

# Push all tags on branch <branchname> to remote
$ git push <remotename> <branchname> --tags

# If you have saved your signing key in git config:
$ git tag -s <tagname> <commitid>

# Fetch tags from origin
$ git fetch --tags origin
# Note: a plain git-fetch fetches all branches, all commits associated with
# those branches, and all tags _reachable_ from those branches.
# This means that if a certain tag is no longer reachable from any branch, it
# will not be fetched. Hence the explicit git fetch --tags command.

# list tags
$ git tag -l

# list tags and sort numbered versions correctly.
$ git tag --list --sort=version:refname

# Create a tag without signing it (annotated tag)
$ git tag -a

# Find out the latest version tag you have created (say v0.93.1.2)
$ git describe --match v*

# Find the latest tag that you have created.
$ git describe --tags `git rev-list --tags --max-count=1`

# Show an old version of the file
$ git show v2.5:fs/locks.c

# Get the commit-id from a tag name
$ git rev-parse name

# Deleting a tag locally
$ git tag -d 12345

# and deleting a tag from origin
$ git push origin :refs/tags/12345

# Print list of tags that contain a given commit
$ git tag --contains <SHA>

* Listing and Display
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       4df162db-813d-4473-84c6-853fa3147a08
:END:

# list all the files that have changed between two revisions
$ git diff --name-only rev1 rev2

# list files in a single commit. format string is very, very useful
$ git show --pretty="format:" --name-only <commitid>

# single line logs
$ git log --pretty=oneline

# commits by author
$ git log --author=foo

# some other fun things with log: --graph, --topo-order, --since
# here is a particularly good example of playing with log for fun and profit
$ git log --pretty=format:'%C(bold red)%h%Creset -%C(bold yellow)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)[%an]%Creset' --graph

# Work done in the last 7 Days
$ git log --author=$USER --format="- %B" --since=-7days --reverse

# show files changed between branches in a 'git status' way
$ git diff --name-status master..branch

# show changes in a single file (log + diff)
$ git log -p <filename>

# Generate changelog for a branch
$ git shortlog master..branch

# list all commits that differ between branches.
# Note: --cherry-pick can be replaced by --cherry-mark. --cherry-mark
# marks equivalent commits with = rather than omitting them, and in-equivalent
# ones with +.
$ git log --left-right --graph --cherry-pick --oneline branch1...branch2

# List all unpushed local commits
$ git log --branches --not --remotes

# Here is an interesting log format
$ git log --pretty=format:'%C(bold red)%h%Creset -%C(bold yellow)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)[%an]%Creset' --graph
# List the most recent unpushed local commits on each branch
$ git log --branches --not --remotes --simplify-by-decoration --decorate --oneline

# List unpushed local commits in the current branch
$ git log @{u}..

# List all local changes (origin/master is the remote branch in this example)
$ git diff origin/master..HEAD

# Show changes made to a file from rev1 to rev2
# rev1 occurs before in time than rev2
$ git diff rev1:filename rev2:filename

* Patches and Pull Requests
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       c793db08-b328-4de6-8aee-a6ee9e48df9d
:END:

** Create a patch between two ids
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       8471f379-1783-466f-9d22-e09a1378610a
:END:
   #+begin_src shell-script :eval no
     git diff [commit-id-before] [commit-id-after] > my.patch
   #+end_src

** Create a ready-to-send patch with the last 3 commits
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       2147d876-1839-409a-8644-d912895d97dc
:END:
   #+begin_src shell-script :eval no
     git format-patch -3
   #+end_src

** Apply commits selectively from one branch to another.
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       e8f910ff-ad99-4b6d-89ea-f61e500b81b7
:END:
   #+begin_src shell-script :eval no
     git format-patch -k -s --stdout R1..R2 | git am -3 -k
   #+end_src
   Here, the flags mean the following:
   - =-k=: keep subject
   - =-s=: signoff
   - =-3=: use diff3 in case of conflict

   There is also an easier way of doing this:
   #+begin_src shell-script :eval no
     git cherry-pick R1..R2
   #+end_src

** Create a patch of the commits present in this branch but not in master
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       cde92784-d8b5-4ffe-a18d-c0edc4be10dd
:END:
   #+begin_src shell-script :eval no
     git format-patch master --stdout > diff-with-master.patch
   #+end_src

** Check the stats of the patch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       e5a6b3e2-c68e-42e3-9eb5-cd9e2f58f1ce
:END:
   #+begin_src shell-script :eval no
     git apply --stat diff-with-master.patch
   #+end_src

** Check if the patch will apply cleanly
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       be32948f-f3d9-4f7b-8a12-8491ad36ca13
:END:
   #+begin_src shell-script :eval no
     git apply --check diff-with-master.patch
   #+end_src

** Apply the patch to the master branch
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       6592b613-bb98-4150-8ea3-1ae637ba5257
:END:
   #+begin_src shell-script :eval no
     git am -3 --signoff < diff-with-master.patch
   #+end_src

** Create a beautiful pull request for submitting to another repository
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       3d6c7bea-b240-4bdf-af21-2243e5d463d6
:END:
The aim here is to inform another author of your public repository, what they can find there and what they should do to pull those changes into their own repository. The way to do this:

- Push all the changes to your public repository, preferably in a well-named branch.
- Run the following command to generate a well-formatted message:
  #+begin_src shell-script
    git request-pull master https://github.com/vedang/pdf-tools/ feature/render-improvements
  #+end_src
  + Here, =master= is the upstream branch that you want to generate
    a PR against.
  + =https://github.com/vedang/pdf-tools/= is your public repository
  + =feature/render-improvements= is your branch (which contains
    the changes you want to submit)
** Generating release notes for your open source work
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       0ae857c9-37b0-47de-8044-b27954fa36fa
:END:
   - Generate the pull request as shown above
     #+begin_src sh
       git request-pull master https://github.com/vedang/clj_fdb/ dev
     #+end_src
   - Copy the changes as mentioned in the output above
   - Create a changelogs file.

* Submodules
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       4dcd6e04-0875-4307-bde4-fa8554387770
:END:

** Adding another repository as a submodule
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       2bcd3a87-a4a2-4a8a-9c14-e0ea7db787b7
:END:
   #+begin_src shell-script :eval no
     git submodule add path_to_git_repo local_dir &&
     git submodule init &&
     git submodule update;
   #+end_src
   - =path_to_git_repo=: eg: git@github.com:vedang/csaoid
   - =local-dir=: eg: lib/csaoid

** Pulling from the remote and updating a submodule
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       1686bf54-34e6-44e3-8e72-92a04b0428c8
:END:
- Git submodule update keeps the submodule in headless state. When you
  want to bring the submodule up-to-date, remember to checkout to a
  branch first.
  + NOTE: This is not true with the latest versions of git. These
    versions will checkout the default branch in the submodule for you
- Updating all submodules while pulling upstream changes:
  1. Get all the changes
     #+begin_src shell-script :eval no
       git pull --recurse-submodules #requires git 1.7.3+
     #+end_src
  2. Checkout the proper SHA-1
     #+begin_src shell-script :eval no
       git submodule update --recursive
     #+end_src

** Getting all the submodules in a repository while cloning it
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       5dfd698b-99b5-4241-8066-bf322287fa36
:END:
   #+begin_src shell-script :eval no
     git clone --recursive <path-to-remote-repo>
   #+end_src

** Deleting a Submodule
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       897ceec6-4ea9-4327-9c1c-fafc4ed873d7
:END:
1. Delete the relevant section from the =.gitmodules= file.
2. Delete the relevant section from =.git/config=.
3. Run:
   #+begin_src shell-script :eval no
     git rm --cached path_to_submodule # (no trailing slash)
   #+end_src
4. Commit and delete the now untracked submodule files.

* Subtree (1.7.11+)
  :PROPERTIES:
  :ID:       171BE2FB-7835-4E96-A984-FC2B24E91019
  :END:
- The primary difference between submodules and subtrees is in the
  intent behind their usage.
  + If you are adding your own child repo to a parent repo, and you
    plan to actively develop the child repo from inside the parent
    repo, use submodules.
  + If you are adding an external child repo to a parent repo, and you
    never plan to contribute changes back to the child repo from
    inside the parent repo, use subtrees.
- Submodules : a pointer to a specific commit in another repository
  + This means its trivial to push changes back, but you have to be
    careful about pulling changes. The submodule is an entirely
    different repo.
- Subtrees: a full copy of a repository pulled into a parent
  repository.
  + This means it's trivial to pull changes, but you have to be
    careful about pushing changes. The subtree is a copy of a
    different repo, we don't know anything about that repo in the
    parent. We only benefit from having the content.

** Adding a repository as a subtree to your current repository
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       380c8226-d9b4-45a1-b397-a113b045d68f
:END:
   #+begin_src shell-script :eval no
     git subtree add --prefix=path/in/curr/repo --squash \
         git://github.com/yourname/your-repo.git master
   #+end_src

** Pulling changes from subtree
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       b310e9e8-8c05-4118-9187-6f004be84914
:END:
   #+begin_src shell-script :eval no
     git subtree pull --prefix=path/in/curr/repo --squash \
         git://github.com/yourname/your-repo.git master
   #+end_src

** Pushing the changes that you have made in a subtree back upstream
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       3c53565f-950c-42d0-8e02-66f719d8acb8
:END:
   #+begin_src shell-script :eval no
     git subtree split --prefix=subdir/ --annotate='(split)' -b split_dir_latest
     git push git@github.com:yourname/your-repo.git split_dir_latest:master
   #+end_src

   Git subtree guarantees that previously seen commits with retain the
   same SHAs which makes this operation relatively straightforward.

** Splitting out code from an existing repository into a new repository
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       b361b467-c675-45aa-9561-875a62cb077e
:END:
   #+begin_src shell-script :eval no
     git subtree split --prefix=subdir/ --annotate='(split)' -b split_branch
     git push git@github.com:yourname/your-repo.git split_branch:master
   #+end_src

* Worktree (2.5+)
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       b1435fef-b78d-4e57-9ec1-8ed06bb8a194
:END:
Use Git Worktrees (2.5+) for working on multiple things in parallel. Suppose I want to run tests on the work I've done on ~feature/s~

#+begin_example
  [v@hm ~/src/m (feature/s $ u+1)]
  $ git worktree add -b s-tests ../mtesting feature/s
  Enter ../mtesting (identifier mtesting)
  Branch s-tests set up to track local branch feature/s by rebasing.
  Switched to a new branch 's-tests'

  [v@hm ~/src/m (feature/s $ u+1)]
  $ cd ../mtesting
#+end_example

Voila! I have a new directory with a new branch that is linked to my original repository!
#+begin_example

  [v@hm ~/src/mtesting (s-tests $ u=)]
  $ make testclj

  # Now I can start my tests here and go back to my work in the original
  # repository without worrying about breaking anything!
  [v@hm ~/src/mtesting (s-tests $ u=)]
  $ cd ../m
  [v@hm ~/src/m (feature/s $ u+1)]
  $
#+end_example

** List all existing git worktrees
#+begin_src sh :eval no
  git worktree list
#+end_src
** Using Joe Armstrong's method for re-writing from scratch with git-worktrees
:PROPERTIES:
:CREATED:  [2022-06-20 Mon 16:31]
:ID:       AF44377B-0096-4B34-AF36-DB8CB1995913
:BRAIN_PARENTS: FEA65785-D5BF-4D8B-AF9F-C7759EB46A06
:END:
1. Create the following folder structure to get started. For example, here we are developing the ~automerge-clj~ project.
   #+begin_src sh :eval no
     mkdir -p [work-dir]/automerge-clj/v1/
     cd !$
     clojure -Tnew lib :name me.vedang/automerge-clj
     cd automerge-clj
     git init
   #+end_src
2. In the step above, the ~clojure new~ command creates another ~automerge-clj~ directory inside our ~v1~ directory. This is going to be the master repo that will drive our prototyping.
3. Now we make as many commits in ~automerge-clj/v1/automerge-clj~ as we want.
4. Once we feel the need to start a new prototype
   #+begin_src sh :eval no
     cd [work-dir]/automerge-clj/v1/automerge-clj
     git worktree add ../../v2
     cd ../../v2 # Here, git will have automatically created a new branch for us, called v2.
   #+end_src
5. Unfortunately, ~git-worktree~ and ~git-checkout~ are not tied together well at this point, so we create a useless branch ~v2~ in this case. We need to create an orphaned branch at the starting point of the repo in order to start from scratch again.
   #+begin_src sh :eval no
     git checkout --orphan auto-v2  $(git rev-list HEAD | tail -n 1)
     git rm -rf .
   #+end_src
6. At this point, we can either delete the ~v2~ branch or leave it dangling. In any case, we have a blank starting point to work from in the branch ~auto-v2~.
7. Caveat: note that it's ~v1/automerge-clj/deps.edn~ (for example) vs just ~v2/deps.edn~. This is another gotcha I didn't bother working around.
8. When done with prototypes, or when you want to clean up space, you can just
   #+begin_src sh :eval no
     # from the "main" v1/project directory
     git worktree list
     git worktree remove path
   #+end_src

* Adding, Removing & Committing
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       45c8605f-6168-4b9a-ada9-bdb0fd55db99
:END:
** Writing a good commit message
:PROPERTIES:
:CREATED:  [2022-06-01 Wed 22:49]
:ID:       9C3B6CBF-03B5-40FC-ADF4-54FC922470E8
:END:
:RESOURCES:
- [[https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][tbaggery - A Note About Git Commit Messages]]
:END:
The *commit message* is your note to yourself, about *what your snapshot contains*. Refer to [[https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html][a Note about Commit Messages by Tim Pope]] on how to write a good commit message. I write the following in my messages:

1. Brief explanation of what I've done and how I've tested it.
2. Brief note on why I've done it this way.
3. (Sometimes) list of pending stuff that I need to do as next steps / to complete the task / to add to the functionality.

** Interactively stage changes to file
:PROPERTIES:
:CREATED:  [2022-06-01 Wed 22:47]
:ID:       58E529EF-BDFE-412E-A010-506A03564C54
:END:
#+begin_src sh :eval no
  git add -p
#+end_src

** Selectively apply a commit from one branch to another
:PROPERTIES:
:CREATED:  [2022-06-01 Wed 22:47]
:ID:       2F5CA089-FC8D-4D23-A1EF-A6F9D265FA5F
:END:
#+begin_src sh :eval no
  git cherry-pick <commit-id>
#+end_src

** Reuse the commit message used in the latest commit, during amend
:PROPERTIES:
:CREATED:  [2022-06-01 Wed 22:47]
:ID:       D20B2EB0-A3BF-4DCC-8C8B-640FD0C2769A
:END:
So that you don't have to retype the commit message
#+begin_src sh :eval no
  git commit --amend -C HEAD
#+end_src

** Delete all untracked files in the repository
:PROPERTIES:
:CREATED:  [2022-06-01 Wed 22:48]
:ID:       8E6CA920-1A0A-4003-A719-7772532C07CF
:END:
#+begin_src sh :eval no
  # -d : delete untracked directories
  # -x : delete ignored files.
  # -f : force. This command is disabled otherwise.
  git clean -dxf <path>
#+end_src

** Selectively copy a file from a different branch into the current branch
#+begin_src sh :eval no
  git checkout <branch_name> <filename>
#+end_src
* Debugging, Recovery & Undoing
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       cad9dc30-7c68-4b07-930c-4f8a3ebb546f
:END:

# To find a regression that happened between v2.6.18 and master
$ git bisect start
$ git bisect good v2.6.18
$ git bisect bad master

# Git will now take you to a commit in between v2.6.18 and master,
# verify if the commit is good or bad and mark it using
$ git bisect good # or
$ git bisect bad

# When you've found the bad commit and are done with the bisect
$ git bisect reset

# You can also specify a script to auto mark a commit as good or bad
$ git bisect run my_script

# Show me a list of dangling commits and blobs
$ git fsck --lost-found --no-reflog

# Show me everywhere that HEAD has pointed to in the past
git reflog

# Show me all commits that touched a file / multiple files /
# files in a given directory / files in multiple directories
# since version v1.5.0
$ gitk v1.5.0.. <filenames/directorynames>

# show me all changes to file in the in the last 2 weeks
$ gitk --since="2 weeks ago" -- <filename>

# Show me the last 100 changes to the file across all branches
$ gitk --max-count=100 --all -- <filename>

# gitk can take a selective list of commits and
# show them to you, this allows us to see all the dangling
# commits and select the ones we want to recover.
$ gitk --all $( git fsck --no-reflog | awk '/dangling commit/ {print $3}' )

# Undo a commit amend:

# 1. When you haven't pushed the commit to remote
# From: http://stackoverflow.com/a/1459264/137430
# Move the current head so that it's pointing at the old commit
# Leave the index intact for redoing the commit
$ git reset --soft HEAD@{1}

# commit the current tree using the commit details of the previous
# HEAD commit. (Note that HEAD@{1} is pointing somewhere different from the
# previous command. It's now pointing at the erroneously amended commit.)
$ git commit -C HEAD@{1}

# 2. When you have pushed the original commit to remote
$ git reset --soft HEAD^1

$ git stash

$ git pull origin <branchname>

$ git stash pop
# Resolve whatever conflicts you may have and create a new commit with the
# changes you wanted to amend.

# Undo a rebase
# Sometimes, we rebase by mistake. Here is an easy way to fix it,
# using git's awesome reflog
$ git log -g  # Walks reflog and shows you a history of your actions
              # This command is invaluable and needs to be cross
              # documented in the logging section.
# Walk the history of your actions until the moment before you began
# the rebase, then reset your branch here. Voila.

# Check the history of a branch. It will output all changes made to
# the branch, including its creation.
$ git reflog show --no-abbrev <branch name>

# Undo a git-rerere conflict resolution
# rerere is awesome, we are all agreed upon this.
# However, sometimes, we can make a _bad_ conflict resolution
# And then we are royally screwed.
# When we figure out that a bad resolution has been applied,
# we can undo the rebase and do it again. Unfortunately for us, rerere
# will have stored the resolution, and it will happily go ahead and
# apply the resolution. Now what?
# Recover conflict markers in a file by running the following command:

$ git checkout -m <file>

* Searching
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       8a8b181e-b73e-4202-b296-6f66e0c8a029
:END:
** Search for =regex= in the entire repo.
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       e0375acc-6cc4-46e9-954e-60278408fffd
:END:
   #+begin_src sh :eval no
     git grep regex
   #+end_src
** Search for =search_regex= only in files that match =file_regex=
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       36b79552-8ba6-4373-bfb5-58ac880ea75c
:END:
   #+begin_src sh :eval no
     git grep search_regex -- 'file_regex'
   #+end_src

** Find all the refs (tags, branches) that a given commit belongs to
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       24115789-50e1-4b29-ae51-9829d7672e09
:END:
Note that this is only available for Git versions 2.7 and above
   #+begin_src sh :eval no
     git for-each-ref --contains SHA1
   #+end_src
* Misc
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       dc11c2a1-72fa-465f-9a69-2adc248520c8
:END:

# get rid of bloody trailing whitespace
$ git apply --whitespace=fix

# Rewrite Author's email address
# WARNING: This rewrites every commit in repository i.e. All SHAs will
#          change. Use this on a New repository
$ git filter-branch --commit-filter '
        if [ "$GIT_AUTHOR_EMAIL" = "original_email_address" ];
        then
                GIT_AUTHOR_NAME="FirstName LastName";
                GIT_AUTHOR_EMAIL="new_email_address";
                git commit-tree "$@";
        else
                git commit-tree "$@";
        fi' HEAD
# Re-write author's email in the last _unpushed_ commit
# 1. Set the new author name and email using git config and then use :
$ git commit --amend --reset-author

# Quick Git Server for local network
# You can run the git daemon if you want other people to clone your
# repository over the local network.
$ git daemon --reuseaddr --verbose --base-path=. --export-all ./.git

# You can define a handy alias for this. I use =git serve=
$ git config --global alias.serve '!git daemon --reuseaddr --verbose --base-path=. --export-all ./.git'
# Refer http://stackoverflow.com/a/377293

# To clone from this daemon, give your computer ip to your colleagues.
# Find your computer ip
# $ ifconfig | grep "inet " | awk '{ print $2 }'

# On other computer:
$ git clone git://192.168.254.135/ project

** Connecting to SSH over IPV6 causes a problem
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       cd0f32a3-b7b0-41ce-b829-1f1fa96eff76
:END:
debug2: resolving "github.com" port 22
debug2: ssh_connect_direct
debug1: Connecting to github.com [64:ff9b::dea:d226] port 22.
debug1: connect to address 64:ff9b::dea:d226 port 22: Connection timed out
debug1: Connecting to github.com [13.234.176.102] port 22.
debug1: Connection established.
* Extra configuration for a better Git experience
:PROPERTIES:
:CREATED:  [2022-03-21 Mon 13:20]
:ID:       1b675482-480b-4f49-b945-597e28efbb8b
:END:

$ git config --global user.name "FirstName LastName"

$ git config --global user.email "user@example.com"

# Fancy colors on the terminal
$ git config --global color.ui "auto"

# Reuse Rebase Resolution, always
$ git config --global rerere.enabled 1

# Always pull with the rebase switch
$ git config --global branch.autosetuprebase always

# Setting up rebase for existing branches
$ git config branch.*branch-name*.rebase true

# Always setup a branch for merging
$ git config --global branch.autosetupmerge always

# Use shortlog summary when creating a merge commit
$ git config --global merge.summary true

# Save your gpg signing key so that you don't have to type it every time
$ git config --global user.signingkey <keyid>

# List your current git configuration
$ git config --list

# Find extra configuration for my personal use-case in my dotfiles directory
# https://github.com/vedang/dotfiles/blob/master/.gitconfig
