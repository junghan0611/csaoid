-*- mode: org; comment-column: 0; -*-

# This file contains a list of shell commands that I've found handy in situations
# I've faced over time. These are commands that _I_ have used (successfully).
# I'm not claiming that this is the only way or even the right
# way to handle a particular situation that you may face. YMMV.

# The commands are ordered by type rather than difficulty, so you are going to
# find intermediate and slightly advanced commands intermingled with the easy
# ones. I mean for this document to be used as a cheat-sheet, not a tutorial,
# but if you are confused about something shoot me a mail

* Redirection
  # How do I redirect the output of a process to a log file, and
  # background the process at the same time?
  - some_cmd > some_file 2>&1 &
  # How to I capture both STDOUT as well as STDERR in a file for
  # analysis?
  # https://stackoverflow.com/questions/692000/how-do-i-write-stderr-to-a-file-while-using-tee-with-a-pipe/692407#692407
  - some_cmd > >(tee -a stdout.log) 2> >(tee -a stderr.log >&2)

* Shell shortcuts
** Copy the last command on the shell
  - !!
** Copy the nth command on the shell
  - !N
** Copy the last argument of the previous command
  - !$ or Esc .
** Just print any command in history starting with something. eg: rsync:p
  - :p
** Expand the variable
  - C-M-e or ESC C-e
** Search through previous command history
  - C-r
** Copy all args of the last command
  - !*
** Delete backwards
  - C-w
** Replace old with new in the previous command
  - ^old^new
** Exansions across multiple folders. eg: cp handlers/{user,site,profile}/ .
  - {}
** Get specific arguments from previous commands (with pos/neg count)
  - M-.
** Show matching expansions
  - M-=
** Expand hostname
  - M-@
** Comment out the command
  - M-#
** Redirect both error and output of a command to a file using tee
   #+begin_src shell-script :eval no
     lein deps :tree |& tee deps.log
   #+end_src

   This command (above) is a shortcut for:

   #+begin_src shell-script :eval no
     lein deps :tree 2&1 | tee deps.log
   #+end_src
** Redirect error to one file and output to another file
   If you want to collect the output into two different files, use
   process substitution.
   #+begin_src shell-script :eval no
     lein deps :tree > >(tee depsout.log) 2> >(tee depserr.log >&2)
   #+end_src

* Info
  # To install a downloaded info file to a dir file. Note, if dir does
  # not exist, install-info will create it properly.
  - install-info --info-file=sicp.info --dir-file=dir
* Finding things
** How do I run a command in all directories under the current directory?
   #+begin_src shell-script
     find . -maxdepth 1 -type d \( ! -name . \) -print0 | xargs -0 -L1 sh -c 'echo "Working in $0" && cd "$0" && git fetch origin'
   #+end_src

   #+begin_src shell-script
     find . -maxdepth 1 -type d \( ! -name . \) -exec sh -c 'echo "Working in $0" && cd "$0" && git fetch origin'
   #+end_src
** How do I list all files of *.h and *.cc?
   #+begin_src shell-script
     find . \( -name "*.h" -o -name "*.cc" \) -print
   #+end_src
** How to I list all the directories in which a certain string occurs?
   Useful for finding, for example, API keys across repos
   #+begin_src shell-script
     rg -l -uu string-to-search . | cut -d'/' -f2 | uniq
   #+end_src
* Shell + Emacs
  # How do I redirect the output of a shell command into Emacs for editing?
  - command | (f=$(mktemp); cat > $f; emacsclient $f; rm -v $f)
  - command | (f=$(mktemp); cat > $f; emacsclient $f; cat $f)
  # How do I run a shell command from inside Emacs?
  - Run M-! in Emacs
* Process utils
- ~ps -eTp~
- ~/usr/share/bcc/tools/cachetop~
- ~/usr/share/bcc/tools/filetop -s writes -p `pgrep mongod`~
- ~sudo perf record -F99 -p `pgrep mongod`-g -- sleep 120~
- ~procs~ as a replacement for ~ps~
** Check the uptime of a process using ps
:PROPERTIES:
:CREATED:  [2022-01-23 Sun 11:05]
:ID:       0E20085B-9A50-4BAB-8D3D-B084DAA2B481
:END:
#+begin_src sh :eval no
ps -eo pid,comm,lstart,etime,time,args | grep <process>
#+end_src
** Dealing with processes in the foreground and background
:PROPERTIES:
:CREATED:  [2022-01-23 Sun 19:57]
:ID:       fb2bc3ab-8d3c-4484-913f-d727004893d1
:END:
- List all jobs: ~jobs -l~
- Starting a process in the background: ~emacs &~
- Bringing it to the foreground:
  + ~jobs -l~ to see jobs
  + ~fg %<job-num>~ to bring it in the foreground.
- Pushing a job to the background
  + ~C-z~ to stop the job
  + ~jobs -l~ to see jobs
  + ~bg %<job-num>~ to push the job in the background and start it again.

* Sum numbers in shell
  - <cmd> | paste -sd+ - | bc
* SSH break bad connection
- Press ~. on the shell
* NTP: fix the date on your machine
- Install =ntp= and =ntpdate=
  + sudo apt install ntp ntpdate
- Sync time with ntpdate
  + sudo ntpdate 0.us.pool.ntp.org
- If you see an error that ntp socket is already in use, turn off ntpd
  (that is generally what is running on 123 port)
  + ps ax | grep ntpd
  + sudo kill <pid>
- This should sync your time correctly with the ntp servers.

* Locate
** Updating locate db on Mac
   #+begin_src shell-script :eval no
     sudo /usr/libexec/locate.updatedb
   #+end_src
** Updating locate db on Ubuntu
   #+begin_src shell-script :eval no
     sudo updatedb
   #+end_src

* Dig
  - https://www.thegeekstuff.com/2012/02/dig-command-examples/

* wget notes
** Recursively fetch data from a webpage.
** Download from wget such that you can resume the download

* Shell Script
  To read the scripting manual, run =man bash=.
** Conditionals and tests in Shell Script
   To understand all the conditional flags that you can use in a shell
   script, read =man test=.

* Observing traffic on the network
** ngrep
- Any UDP from any local interfaces to 91.22.38.4:12201
  #+begin_src shell-script :eval no
    ngrep -W byline -d any udp and host 91.22.38.4 and dst port 12201
  #+end_src
** tcpdump
- Show UDP packet header and data parts
  #+begin_src shell-script :eval no
    tcpdump -i lo -n udp port 8125 -X
  #+end_src
- Save packets to pcap file for inspection in wireshark
  #+begin_src shell-script :eval no
    tcpdump -i lo -n udp port 14550 -w packets.pcap
  #+end_src

* Sending traffic to a socket
** nc (netcat)
- ~nc~ is great because you can pipe stdin / stdout to it.
- Start a server:
  #+begin_src sh :eval no
    nc -l localhost 3000
  #+end_src
- Start a client:
  #+begin_src sh :eval no
    nc localhost 3000
  #+end_src

* Ripgrep (rg) notes
** Searching in the entire dir, including in ignore files
#+begin_src sh :eval no
  rg --no-ignore <text to search>
  rg -uu <text to search>
#+end_src
From the man page:

  -u, --unrestricted
      Reduce the level of "smart" searching. A single -u won't respect .gitignore
      (etc.) files. Two -u flags will additionally search hidden files and
      directories. Three -u flags will additionally search binary files.

      'rg -uuu' is roughly equivalent to 'grep -r'.

* Remove color markers from command output
:PROPERTIES:
:CREATED:  [2022-03-03 Thu 09:45]
:ID:       863AF267-B0D5-4815-A23D-FCF40B046CB4
:END:
Commands which print output in color make it difficult to work with data using pipes etc. Here is a simple [[brain:C3A60958-E079-4894-83D3-544F6F2D7553][Sed]] script to remove the markers:
#+begin_src sh :eval no
  gsed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g"
#+end_src
